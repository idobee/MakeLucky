name: Deploy to Root GitHub Pages (idobee.github.io)

on:
  workflow_dispatch:
    inputs:
      external_repository:
        description: External repo to publish (owner/repo)
        required: false
        default: idobee/idobee.github.io
      publish_branch:
        description: Branch to publish to (main or master)
        required: false
        default: main
  push:
    branches: [ main, master ]

permissions:
  contents: read

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm ci

      - name: Prepare .env.production (Secrets/Variables fallback)
        run: |
          CLIENT_ID="${{ secrets.VITE_GOOGLE_ADSENSE_CLIENT_ID }}"
          if [ -z "$CLIENT_ID" ]; then CLIENT_ID="${{ vars.VITE_GOOGLE_ADSENSE_CLIENT_ID }}"; fi
          SLOT_ID="${{ secrets.VITE_GOOGLE_ADSENSE_SLOT_ID }}"
          if [ -z "$SLOT_ID" ]; then SLOT_ID="${{ vars.VITE_GOOGLE_ADSENSE_SLOT_ID }}"; fi
          echo "VITE_GOOGLE_ADSENSE_CLIENT_ID=$CLIENT_ID" >> .env.production
          echo "VITE_GOOGLE_ADSENSE_SLOT_ID=$SLOT_ID" >> .env.production
          if [ -n "$CLIENT_ID" ]; then echo "CLIENT_ID: present"; else echo "CLIENT_ID: MISSING"; fi
          if [ -n "$SLOT_ID" ]; then echo "SLOT_ID: present"; else echo "SLOT_ID: MISSING"; fi

      - name: Validate GH_PAGES_TOKEN secret
        env:
          GH_TOKEN: ${{ secrets.GH_PAGES_TOKEN }}
        run: |
          if [ -z "$GH_TOKEN" ]; then
            echo "::error::Missing GH_PAGES_TOKEN secret in idobee/MakeLucky.\nAdd a Fine-grained PAT with Contents: Read and write to repo 'idobee/idobee.github.io' under Settings → Secrets and variables → Actions."
            exit 1
          fi

      - name: Check external repository exists and PAT permissions
        env:
          GH_TOKEN: ${{ secrets.GH_PAGES_TOKEN }}
          EXTERNAL_REPO: ${{ inputs.external_repository }}
        run: |
          set -e
          if [ -z "$EXTERNAL_REPO" ]; then EXTERNAL_REPO="idobee/idobee.github.io"; fi
          if [ -n "$GH_TOKEN" ]; then
            CODE=$(curl -s -o /dev/null -w "%{http_code}" -H "Authorization: token $GH_TOKEN" https://api.github.com/repos/$EXTERNAL_REPO)
          else
            CODE=$(curl -s -o /dev/null -w "%{http_code}" https://api.github.com/repos/$EXTERNAL_REPO)
          fi
          if [ "$CODE" != "200" ]; then
            echo "::error::External repository '$EXTERNAL_REPO' not found or no access.\n- Create repo named 'idobee.github.io' (Public)\n- Ensure PAT has Contents: Read and write to that repo.\n- Then re-run this workflow."
            exit 1
          fi

      - name: Resolve external default branch
        id: ext
        env:
          GH_TOKEN: ${{ secrets.GH_PAGES_TOKEN }}
          EXTERNAL_REPO: ${{ inputs.external_repository }}
        run: |
          set -e
          if [ -z "$EXTERNAL_REPO" ]; then EXTERNAL_REPO="idobee/idobee.github.io"; fi
          if [ -n "$GH_TOKEN" ]; then
            JSON=$(curl -s -H "Authorization: token $GH_TOKEN" https://api.github.com/repos/$EXTERNAL_REPO)
          else
            JSON=$(curl -s https://api.github.com/repos/$EXTERNAL_REPO)
          fi
          DEF=$(echo "$JSON" | sed -n 's/.*"default_branch"[[:space:]]*:[[:space:]]*"\([^"]*\)".*/\1/p' | head -n1)
          if [ -z "$DEF" ]; then DEF="main"; fi
          echo "Default branch resolved: $DEF"
          echo "default_branch=$DEF" >> $GITHUB_OUTPUT

      - name: Build for root site (base=/)
        run: |
          ./node_modules/.bin/tsc -p tsconfig.json || true
          ./node_modules/.bin/vite build --base=/

      - name: Ensure manifest link in dist/index.html
        run: |
          if [ -f dist/index.html ]; then
            if ! grep -q 'rel="manifest"' dist/index.html; then
              sed -i 's|</head>|\n    <link rel="manifest" href="/manifest.webmanifest"/>\n    <meta name="theme-color" content="#4f46e5"/>\n    <link rel="apple-touch-icon" href="/icons/icon-512x512.png"/>\n    <link rel="apple-touch-icon" sizes="192x192" href="/icons/icon-192x192.png"/>\n  </head>|' dist/index.html
            fi
          fi

      - name: Override manifest for root
        run: |
          if [ -f public/manifest.root.webmanifest ]; then
            cp public/manifest.root.webmanifest dist/manifest.webmanifest
          fi
          mkdir -p dist/icons
          [ -f public/icons/icon-192x192.png ] && cp public/icons/icon-192x192.png dist/icons/ || true
          [ -f public/icons/icon-512x512.png ] && cp public/icons/icon-512x512.png dist/icons/ || true

      - name: Add SPA fallback (404.html) and .nojekyll
        run: |
          cp dist/index.html dist/404.html
          touch dist/.nojekyll

      - name: Deploy to external repo
        uses: peaceiris/actions-gh-pages@v3
        with:
          personal_token: ${{ secrets.GH_PAGES_TOKEN }}
          external_repository: ${{ inputs.external_repository }}
          publish_branch: ${{ steps.ext.outputs.default_branch }}
          publish_dir: ./dist
          user_name: github-actions[bot]
          user_email: 41898282+github-actions[bot]@users.noreply.github.com
          commit_message: "Deploy MakeLucky to root site: ${{ github.sha }} (repo=${{ inputs.external_repository }}, branch=${{ inputs.publish_branch }})"

      - name: Post-deploy verification (manifest and icons)
        if: always()
        run: |
          URL_MANIFEST="https://idobee.github.io/manifest.webmanifest"
          URL_ICON192="https://idobee.github.io/icons/icon-192x192.png"
          URL_ICON512="https://idobee.github.io/icons/icon-512x512.png"
          echo "Checking: $URL_MANIFEST" && curl -s -I "$URL_MANIFEST" | head -n 20 || true
          echo "Checking: $URL_ICON192" && curl -s -I "$URL_ICON192" | head -n 20 || true
          echo "Checking: $URL_ICON512" && curl -s -I "$URL_ICON512" | head -n 20 || true
