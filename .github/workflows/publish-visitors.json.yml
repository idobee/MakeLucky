name: Publish visitors.json to idobee.github.io

on:
  workflow_dispatch:
  schedule:
    - cron: '20 1 * * *' # Daily at 01:20 UTC

permissions:
  contents: read

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - name: Prepare visitors.json
        env:
          GH_PAT: ${{ secrets.GH_PAGES_TOKEN }}
          METRICS_API_BASE: ${{ secrets.METRICS_API_BASE }}
          ROOT_REPO: idobee/idobee.github.io
          COUNT_NAMESPACE: idobee.github.io
          COUNT_KEY: root-visitors
        run: |
          set -euo pipefail

          if [ -z "${GH_PAT:-}" ]; then
            echo "GH_PAGES_TOKEN is not set. Provide a classic PAT with repo scope." >&2
            exit 1
          fi

          # Determine default branch of the root repo (for Contents API commit)
          DEFAULT_BRANCH=$(curl -sS -H "Authorization: token ${GH_PAT}" https://api.github.com/repos/${ROOT_REPO} | jq -r .default_branch)
          if [ -z "$DEFAULT_BRANCH" ] || [ "$DEFAULT_BRANCH" = "null" ]; then DEFAULT_BRANCH=main; fi
          echo "DEFAULT_BRANCH=$DEFAULT_BRANCH" >> "$GITHUB_ENV"

          # Fetch visitors count: prefer Worker if configured, else CountAPI
          SOURCE=""
          VALUE=""
          if [ -n "${METRICS_API_BASE:-}" ]; then
            resp=$(curl -sS "${METRICS_API_BASE%/}/api/visitors") || true
            val=$(printf '%s' "$resp" | jq -r '.value // empty') || true
            if [ -n "$val" ]; then
              SOURCE="worker"
              VALUE="$val"
            fi
          fi

          if [ -z "$VALUE" ]; then
            resp=$(curl -sS "https://api.countapi.xyz/get/$(printf '%s' "$COUNT_NAMESPACE" | sed 's/\//%2F/g')/$(printf '%s' "$COUNT_KEY" | sed 's/\//%2F/g')") || true
            val=$(printf '%s' "$resp" | jq -r '.value // empty') || true
            if [ -n "$val" ]; then
              SOURCE="countapi"
              VALUE="$val"
            fi
          fi

          if [ -z "$VALUE" ]; then
            echo "Failed to resolve visitors value from both Worker and CountAPI" >&2
            exit 1
          fi

          NOW=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          jq -n --arg now "$NOW" --arg source "$SOURCE" --argjson value "$VALUE" \
            '{generatedAt:$now, source:$source, value:$value}' > visitors.json

          echo "Built visitors.json:" && cat visitors.json

      - name: Get existing file SHA (if any)
        env:
          GH_PAT: ${{ secrets.GH_PAGES_TOKEN }}
          ROOT_REPO: idobee/idobee.github.io
          BRANCH: ${{ env.DEFAULT_BRANCH }}
        run: |
          set -euo pipefail
          sha=$(curl -sS -H "Authorization: token ${GH_PAT}" \
            "https://api.github.com/repos/${ROOT_REPO}/contents/visitors.json?ref=${BRANCH}" | jq -r .sha)
          if [ "$sha" = "null" ]; then sha=""; fi
          echo "SHA=$sha" >> "$GITHUB_ENV"

      - name: Publish visitors.json to root repo
        env:
          GH_PAT: ${{ secrets.GH_PAGES_TOKEN }}
          ROOT_REPO: idobee/idobee.github.io
          BRANCH: ${{ env.DEFAULT_BRANCH }}
          SHA: ${{ env.SHA }}
        run: |
          set -euo pipefail
          content_b64=$(base64 -w 0 visitors.json)
          payload=$(jq -n \
            --arg message "chore(visitors): update visitors.json" \
            --arg content "$content_b64" \
            --arg branch "$BRANCH" \
            --arg sha "$SHA" \
            'if $sha == "" then {message: $message, content: $content, branch: $branch}
             else {message: $message, content: $content, branch: $branch, sha: $sha}
             end')

          curl -sS -X PUT -H "Authorization: token ${GH_PAT}" \
            -H "Content-Type: application/json" \
            -d "$payload" \
            "https://api.github.com/repos/${ROOT_REPO}/contents/visitors.json" | jq -r '.content.path + "@" + .commit.sha'
