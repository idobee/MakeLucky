name: Deploy Project Page (MakeLucky)

on:
  workflow_dispatch: {}
  push:
    branches: [ main, master ]

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: pages
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: |
          if [ -f package-lock.json ] || [ -f package.json ]; then
            npm ci || npm install
          else
            echo "No package.json found; skipping npm install"
          fi

      - name: Prepare .env.production (Adsense env)
        run: |
          CLIENT_ID="${{ secrets.VITE_GOOGLE_ADSENSE_CLIENT_ID }}"
          if [ -z "$CLIENT_ID" ]; then CLIENT_ID="${{ vars.VITE_GOOGLE_ADSENSE_CLIENT_ID }}"; fi
          SLOT_ID="${{ secrets.VITE_GOOGLE_ADSENSE_SLOT_ID }}"
          if [ -z "$SLOT_ID" ]; then SLOT_ID="${{ vars.VITE_GOOGLE_ADSENSE_SLOT_ID }}"; fi
          if [ -n "$CLIENT_ID" ] || [ -n "$SLOT_ID" ]; then
            echo "VITE_GOOGLE_ADSENSE_CLIENT_ID=$CLIENT_ID" >> .env.production
            echo "VITE_GOOGLE_ADSENSE_SLOT_ID=$SLOT_ID" >> .env.production
          fi
          if [ -n "$CLIENT_ID" ]; then echo "CLIENT_ID: present"; else echo "CLIENT_ID: MISSING"; fi
          if [ -n "$SLOT_ID" ]; then echo "SLOT_ID: present"; else echo "SLOT_ID: MISSING"; fi

      - name: Build with Vite (base=/MakeLucky/)
        run: |
          if [ -f node_modules/.bin/vite ]; then
            ./node_modules/.bin/tsc -p tsconfig.json || true
            ./node_modules/.bin/vite build --base=/MakeLucky/
          else
            echo "vite not found; creating minimal dist from public"
            mkdir -p dist && cp -r public/* dist/ 2>/dev/null || true
          fi

      - name: Ensure manifest link in dist/index.html
        run: |
          if [ -f dist/index.html ]; then
            if ! grep -q 'rel="manifest"' dist/index.html; then
              sed -i 's|</head>|\n    <link rel="manifest" href="./manifest.webmanifest"/>\n    <meta name="theme-color" content="#4f46e5"/>\n    <link rel="apple-touch-icon" href="./icons/icon-512x512.png"/>\n    <link rel="apple-touch-icon" sizes="192x192" href="./icons/icon-192x192.png"/>\n  </head>|' dist/index.html
            fi
          fi

      - name: Copy public assets (fallback)
        run: |
          mkdir -p dist/icons
          [ -f public/manifest.webmanifest ] && cp public/manifest.webmanifest dist/ || true
          [ -f public/ads.txt ] && cp public/ads.txt dist/ || true
          [ -f public/vite.svg ] && cp public/vite.svg dist/ || true
          [ -f public/icons/icon-192x192.png ] && cp public/icons/icon-192x192.png dist/icons/ || true
          [ -f public/icons/icon-512x512.png ] && cp public/icons/icon-512x512.png dist/icons/ || true

      - name: Add SPA fallback and .nojekyll
        run: |
          if [ -f dist/index.html ]; then cp dist/index.html dist/404.html; fi
          touch dist/.nojekyll

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: dist

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
